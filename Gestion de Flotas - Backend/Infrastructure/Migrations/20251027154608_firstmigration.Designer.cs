// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251027154608_firstmigration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AsignacionesRutas", b =>
                {
                    b.Property<Guid>("AsignacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("asignacion_id");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_asignacion");

                    b.Property<Guid>("RutaHorarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ruta_horario_id");

                    b.Property<Guid>("UnidadConductorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unidad_conductor_id");

                    b.HasKey("AsignacionId");

                    b.HasIndex("RutaHorarioId");

                    b.HasIndex("UnidadConductorId");

                    b.ToTable("asignaciones_rutas");
                });

            modelBuilder.Entity("Domain.Entities.Conductores", b =>
                {
                    b.Property<Guid>("ConductorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conductor_id");

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cedula");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Licencia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("licencia");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.HasKey("ConductorId");

                    b.ToTable("conductores");
                });

            modelBuilder.Entity("Domain.Entities.Incidencias", b =>
                {
                    b.Property<Guid>("IncidenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("incidencia_id");

                    b.Property<Guid>("AsignacionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("asignacion_id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha");

                    b.Property<int>("Gravedad")
                        .HasColumnType("int")
                        .HasColumnName("gravedad");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("tipo");

                    b.HasKey("IncidenciaId");

                    b.HasIndex("AsignacionId");

                    b.ToTable("incidencias");
                });

            modelBuilder.Entity("Domain.Entities.Roles", b =>
                {
                    b.Property<Guid>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rol_id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("RolId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Domain.Entities.RutasHorarios", b =>
                {
                    b.Property<Guid>("RutaHorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ruta_horario_id");

                    b.Property<string>("Destino")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("destino");

                    b.Property<string>("Dias")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dias");

                    b.Property<double>("Distancia")
                        .HasColumnType("float")
                        .HasColumnName("distancia");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("HoraLlegada")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_llegada");

                    b.Property<DateTime>("HoraSalida")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_salida");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Origen")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("origen");

                    b.HasKey("RutaHorarioId");

                    b.ToTable("rutas_horarios");
                });

            modelBuilder.Entity("Domain.Entities.Unidades", b =>
                {
                    b.Property<Guid>("UnidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unidad_id");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("capacidad");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modelo");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("placa");

                    b.HasKey("UnidadId");

                    b.ToTable("unidades");
                });

            modelBuilder.Entity("Domain.Entities.UnidadesConductores", b =>
                {
                    b.Property<Guid>("UnidadConductorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unidad_conductor_id");

                    b.Property<Guid>("ConductorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conductor_id");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<Guid>("UnidadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unidad_id");

                    b.HasKey("UnidadConductorId");

                    b.HasIndex("ConductorId");

                    b.HasIndex("UnidadId");

                    b.ToTable("unidades_conductores");
                });

            modelBuilder.Entity("Domain.Entities.Usuarios", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contrasena");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rol_id");

                    b.HasKey("UsuarioId");

                    b.HasIndex("RolId");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Domain.Entities.AsignacionesRutas", b =>
                {
                    b.HasOne("Domain.Entities.RutasHorarios", "RutaHorario")
                        .WithMany()
                        .HasForeignKey("RutaHorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnidadesConductores", "UnidadConductor")
                        .WithMany()
                        .HasForeignKey("UnidadConductorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RutaHorario");

                    b.Navigation("UnidadConductor");
                });

            modelBuilder.Entity("Domain.Entities.Incidencias", b =>
                {
                    b.HasOne("Domain.Entities.AsignacionesRutas", "AsignacionRuta")
                        .WithMany()
                        .HasForeignKey("AsignacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsignacionRuta");
                });

            modelBuilder.Entity("Domain.Entities.UnidadesConductores", b =>
                {
                    b.HasOne("Domain.Entities.Conductores", "Conductor")
                        .WithMany()
                        .HasForeignKey("ConductorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Unidades", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("Domain.Entities.Usuarios", b =>
                {
                    b.HasOne("Domain.Entities.Roles", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });
#pragma warning restore 612, 618
        }
    }
}
